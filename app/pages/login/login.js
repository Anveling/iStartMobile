"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var frame = require("ui/frame");
var connectivity = require("connectivity");
var dialogs = require("ui/dialogs");
require("nativescript-dom");
require("nativescript-localstorage");
require('nativescript-effects');
// import * as platformModule from "tns-core-modules/platform";
var platform_1 = require("platform");
var ts_promise_1 = require("ts-promise");
var application = require('application');
var nativescript_geolocation_1 = require("nativescript-geolocation");
var firebase = require("nativescript-plugin-firebase");
var http = require("http");
var constants_1 = require("../../common/constants");
firebase.init({
    onMessageReceivedCallback: function (message) {
        if ('title' in message || 'body' in message) {
            console.log("Title: " + message.title);
            console.log("Body: " + message.body);
        }
        //alert(JSON.stringify(message.body));
    }
}).then(function (instance) {
    console.log("firebase.init done");
    console.log("deviceToken: " + localStorage.getItem('dToken'));
    if (localStorage.getItem('dToken') != null) {
        http.request({
            url: constants_1.BASE_PATH + constants_1.POST_PATH,
            method: 'POST',
            headers: { "Content-type": "application/json" },
            content: JSON.stringify({ deviceToken: localStorage.getItem('dToken'), method: "getBackgroundImageURL" })
        })
            .then(function (resp) {
            console.log('Request sent to CF Server');
            console.log(JSON.stringify(resp.content));
            var jContent = JSON.parse(JSON.stringify(resp.content));
            var imageUrl = JSON.stringify(jContent['imageURL']); //Search for imageURL value and trim the ""
            if (imageUrl) {
                imageUrl = imageUrl.replace(/['"]+/g, '');
                console.log(imageUrl);
                if (localStorage.getItem('imageUrl') != imageUrl) {
                    localStorage.setItem('imageUrl', imageUrl);
                }
            }
            else {
                console.log(JSON.stringify(jContent['error']));
            }
            // imageUrl = imageUrl.replace(/['"]+/g, '');
            // console.log(imageUrl);
            // if(localStorage.getItem('imageUrl') != imageUrl){
            //     localStorage.setItem('imageUrl', imageUrl);
            // }
        }, function (error) {
            console.log('HTTP Request Failed', error);
        });
    }
}, function (error) {
    console.log("firebase.init error: " + error);
});
//import navigation = require('common/navigaton');
var sView, buStack;
function navigatingTo(args) {
    var page = args.object;
    sView = page.getElementById('sViewe');
    console.log(localStorage.getItem('imageUrl'));
    if (localStorage.getItem('imageUrl')) {
        sView.style.backgroundImage = localStorage.getItem('imageUrl');
        ;
    }
}
exports.navigatingTo = navigatingTo;
function loaded() {
    buStack = sView.getElementById('buStack');
    buStack.fadeTo(1000, 0.8);
}
exports.loaded = loaded;
//Fuction which is called when login button is clicked.
function goToWebAuthPage() {
    //Perform check on internet connection
    var connectionType = connectivity.getConnectionType();
    switch (connectionType) {
        case connectivity.connectionType.none:
            var options = {
                title: "\u26A0\uFE0F Alert",
                message: "No Internet Connection! Please connect to Internet and try again.",
                okButtonText: "OK"
            };
            dialogs.alert(options);
            break;
        case connectivity.connectionType.mobile:
            var navigationEntry = {
                moduleName: "pages/web-auth/web-auth",
                animated: true,
                transition: {
                    name: "flip",
                    duration: 380,
                    curve: "easeOut"
                },
            };
            frame.topmost().navigate(navigationEntry); //Navigating to Web Authentication page.
            break;
        case connectivity.connectionType.wifi:
            var navigationEntry = {
                moduleName: "pages/web-auth/web-auth",
                animated: true,
                transition: {
                    name: "flip",
                    duration: 380,
                    curve: "easeOut"
                },
            };
            frame.topmost().navigate(navigationEntry); //Navigating to Web Authentication page.
            break;
    }
}
exports.goToWebAuthPage = goToWebAuthPage;
//Dummy Function to check things
function changeBg() {
    // if(sView.style.backgroundImage === "res://test"){
    //         sView.style.backgroundImage = "res://testbg";
    // }else{
    //         sView.style.backgroundImage = "res://test";
    // }
    // sView.style.backgroundImage = "http://apple.wallpapersfine.com/wallpapers/original/750x1334/w-4634.jpg";
    // console.log("Screen width: " + platformModule.screen.mainScreen.widthPixels);
    // console.log("Screen height: " + platformModule.screen.mainScreen.heightPixels);
    // console.log("Screen scale: " + platformModule.screen.mainScreen.scale);
    nativescript_geolocation_1.getCurrentLocation({ timeout: 155000 })
        .then(function (location) {
        console.log('Location received: ' + location);
        geocode({ location: location })
            .then(function (result) {
            console.log("---------------------Promise---------------------------------");
            console.dir(result);
        })
            .catch(function (e) { console.log(e); });
    }).catch(function (error) {
        console.log("Location error received: " + error);
        alert("location error" + error);
    });
    //var location = new Location();
    //location.latitude = 40.7127837;
    //location.longitude=-74.00594130000002;
    // utils.openUrl("https://www.youtube.com/watch?v=efk_oeI58hc");
}
exports.changeBg = changeBg;
//Sample code for function to reverse geocode location data to find country
function geocode(args) {
    var position;
    if (!args.location)
        return new ts_promise_1.Promise(function (reject) { return reject("error"); });
    if (platform_1.isAndroid) {
        return new ts_promise_1.Promise(function (resolve, reject) {
            var locale = java.util.Locale.getDefault();
            var geocoder = new android.location.Geocoder(application.android.currentContext, locale);
            var addresses = geocoder.getFromLocation(args.location.latitude, args.location.longitude, 1);
            if (addresses != null && addresses.size() > 0) {
                var address = addresses.get(0);
                position = {
                    latitude: address.getLatitude(),
                    longitude: address.getLongitude(),
                    country: address.getCountryName(),
                    countryCode: address.getCountryCode(),
                    addressLines: []
                };
                for (var i = 0; i <= address.getMaxAddressLineIndex(); i++) {
                    position.addressLines.push(address.getAddressLine(i));
                }
                return resolve(position);
            }
        });
    }
    if (platform_1.isIOS) {
        return new ts_promise_1.Promise(function (resolve, reject) {
            var geocoder = new CLGeocoder();
            geocoder.reverseGeocodeLocationCompletionHandler(args.location.ios, function (placemarks, error) {
                if (error) {
                    console.log(error);
                    var newerror = new ts_promise_1.BaseError("error", "error");
                    return reject(newerror);
                }
                else if (placemarks && placemarks.count > 0) {
                    var pm = placemarks[0];
                    var addressDictionary = pm.addressDictionary;
                    var address = ABCreateStringWithAddressDictionary(addressDictionary, false);
                    position = {
                        latitude: args.location.latitude,
                        longitude: args.location.longitude,
                        country: addressDictionary.objectForKey('Country'),
                        countryCode: addressDictionary.objectForKey('CountryCode'),
                        addressLines: []
                    };
                    var lines = addressDictionary.objectForKey('FormattedAddressLines');
                    for (var i = 0; i < lines.count; i++) {
                        position.addressLines.push(lines[i]);
                    }
                    return resolve(position);
                }
            });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,